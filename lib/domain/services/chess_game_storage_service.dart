import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';

import '../models/chess_game.dart';
import '../models/player.dart';

class ChessGameStorageService {
  // static final ChessGameStorageService _instance =
  //     ChessGameStorageService._internal();

  // factory ChessGameStorageService() => _instance;
  // ChessGameStorageService._internal();

  // static late Isar db;
  static late final Isar db;

  /// ✅ فتح قاعدة البيانات لمرة واحدة فقط
  static Future<void> init() async {
    // if (_isar != null) return;
    final dir = await getApplicationSupportDirectory();

    db = await Isar.open(
      [PlayerSchema, ChessGameSchema], // Schemas generated by build_runner
      directory: dir.path,
      inspector: true,
    );
  }

  Isar get isar {
    return db;
  }

  // 🧩 حفظ أو تحديث لاعب
  Future<Player> upsertPlayer(Player player) async {
    await isar.writeTxn(() async {
      await isar.players.put(player);
    });
    return player;
  }

  // 🧩 جلب لاعب حسب uuid
  Future<Player?> getPlayerByUuid(String uuid) async {
    return await isar.players.filter().uuidEqualTo(uuid).findFirst();
  }

  // 🧩 حفظ لعبة مع روابط اللاعبين
  Future<ChessGame> saveGame(ChessGame game, Player white, Player black) async {
    await isar.writeTxn(() async {
      await isar.players.putAll([white, black]);
      game.whitePlayer.value = white;
      game.blackPlayer.value = black;
      await isar.chessGames.put(game);
      await game.whitePlayer.save();
      await game.blackPlayer.save();
    });
    return game;
  }

  // 🧩 جلب جميع الألعاب بترتيب زمني تنازلي
  Future<List<ChessGame>> getAllGames() async {
    final games = await isar.chessGames.where().sortByDateDesc().findAll();
    for (final g in games) {
      await g.whitePlayer.load();
      await g.blackPlayer.load();
    }
    return games;
  }

  // 🧩 البحث عن الألعاب حسب اللاعب
  Future<List<ChessGame>> getGamesByPlayer(String uuid) async {
    final player = await getPlayerByUuid(uuid);
    if (player == null) return [];
    final games =
        await isar.chessGames
            .filter()
            .group(
              (q) => q
                  .whitePlayer((w) => w.uuidEqualTo(uuid))
                  .or()
                  .blackPlayer((b) => b.uuidEqualTo(uuid)),
            )
            .findAll();

    for (final g in games) {
      await g.whitePlayer.load();
      await g.blackPlayer.load();
    }
    return games;
  }

  // 🧩 حذف لعبة
  Future<void> deleteGame(int id) async {
    await isar.writeTxn(() async {
      await isar.chessGames.delete(id);
    });
  }

  // 🧩 حذف كل شيء (للاختبار)
  Future<void> clearAll() async {
    await isar.writeTxn(() async {
      await isar.chessGames.clear();
      await isar.players.clear();
    });
  }
}
