// example_usage.dart
import 'package:dartchess/dartchess.dart';
import 'package:flutter/widgets.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';

import '../models/chess_game.dart';
import '../models/player.dart';

Future<Isar> openIsarInstance() async {
  final dir = await getApplicationSupportDirectory(); // requires path_provider
  final isar = await Isar.open(
    [PlayerSchema, ChessGameSchema], // Schemas generated by build_runner
    directory: dir.path,
    inspector: true, // اختياري أثناء التطوير
  );
  return isar;
}

String manualPgnFromSanList(
  Map<String, String> headers,
  List<String> sanMoves,
  String result,
) {
  // دالة بسيطة تبني PGN نصي من قائمة SAN
  final buffer = StringBuffer();

  // رؤوس PGN
  headers.forEach((k, v) {
    buffer.writeln('[$k "${v.replaceAll('"', '\\"')}"]');
  });
  buffer.writeln(); // سطر فارغ قبل الحركات

  // ترقيم الحركات: sanMoves = ['e4', 'e5', 'Nf3', 'Nc6', ...]
  for (int i = 0; i < sanMoves.length; i += 2) {
    final moveNumber = (i ~/ 2) + 1;
    buffer.write('$moveNumber. ${sanMoves[i]}');
    if (i + 1 < sanMoves.length) {
      buffer.write(' ${sanMoves[i + 1]}');
    }
    if (i + 2 < sanMoves.length) buffer.write(' ');
  }

  buffer.write(' $result'); // النتيجة في نهاية السطر
  return buffer.toString();
}

Future<void> runExample() async {
  WidgetsFlutterBinding.ensureInitialized();

  final isar = await openIsarInstance();

  // 1) أنشئ لاعبين (أو استعلم إذا كانوا موجودين)
  final white =
      Player(uuid: '', name: '', type: '') // مؤقتًا، سنملأ البيانات بعد
        ..uuid = 'player-white-001'
        ..name = 'Alice'
        ..playerRating = 2100;

  final black =
      Player(uuid: '', name: '', type: '') // مؤقتًا، سنملأ البيانات بعد
        ..uuid = 'player-black-001'
        ..name = 'Bob'
        ..playerRating = 2000;

  await isar.writeTxn(() async {
    // خزّن اللاعبين أولًا (لو لم يكونوا موجودين)
    await isar.players.putAll([white, black]);
  });

  // 2) ابدأ موقع البداية (initial position)
  final setup = Setup.parseFen(kInitialFEN); // أو استخدم 'rnbqkbnr/...'
  Position pos = Chess.fromSetup(setup);

  // 3) لنجرب سلسلة حركات لافتتاح Ruy Lopez (نأخذ أول 5 حركات كمثال)
  final moves = <NormalMove>[
    const NormalMove(from: Square.e2, to: Square.e4), // 1. e4
    const NormalMove(from: Square.e7, to: Square.e5), // 1... e5
    const NormalMove(from: Square.g1, to: Square.f3), // 2. Nf3
    const NormalMove(from: Square.b8, to: Square.c6), // 2... Nc6
    const NormalMove(from: Square.f1, to: Square.b5), // 3. Bb5 (Ruy Lopez)
  ];

  final sanList = <String>[];

  for (final move in moves) {
    if (!pos.isLegal(move)) {
      throw Exception('Illegal move: $move');
    }

    // استخدم makeSan للحصول على الـSAN و الوضع الجديد (الإصدار يعطي سجل (Position, String))
    final res = pos.makeSan(move); // res.$1 = new Position, res.$2 = SAN string
    pos = res.$1;
    final san = res.$2;
    sanList.add(san);
  }

  // 4) طريقتان لتوليد PGN:
  // (أ) باستخدام APIs المدمجة في dartchess (PgnGame)
  final headers = PgnGame.defaultHeaders();
  headers['Event'] = 'Local Game';
  headers['Site'] = 'My Flutter App';
  headers['Date'] =
      DateTime.now().toIso8601String().split('T').first; // YYYY-MM-DD
  headers['Round'] = '1';
  headers['White'] = white.name;
  headers['Black'] = black.name;
  headers['Result'] = '*'; // على سبيل المثال، لم تنتهِ اللعبة بعد

  // بناء شجرة PGN بسيطة من moves (mainline فقط)
  final root = PgnNode<PgnNodeData>();
  for (final san in sanList) {
    root.children.add(PgnChildNode<PgnNodeData>(PgnNodeData(san: san)));
  }

  final pgnGame = PgnGame<PgnNodeData>(
    headers: headers,
    moves: root,
    comments: [],
  );
  final pgnFromWriter =
      pgnGame
          .makePgn(); // سلسلة PGN جاهزة. (طريقة مدمجة). :contentReference[oaicite:6]{index=6}

  // (ب) بديل يدوي: دالة بسيطة تحول SAN list إلى نص PGN
  final pgnManual = manualPgnFromSanList(
    headers.map((k, v) => MapEntry(k, v)),
    sanList,
    headers['Result'] ?? '*',
  );

  // 5) حفظ الـGame في Isar وربط باللاعبين
  final game =
      ChessGame()
        ..fullPgn =
            pgnFromWriter // أو pgnManual
        ..movesCount = sanList.length
        ..event = headers['Event']
        ..site = headers['Site']
        ..date = DateTime.now()
        ..round = headers['Round']
        ..result = headers['Result'];

  // ربط اللاعبين
  game.whitePlayer.value = white;
  game.blackPlayer.value = black;

  // احفظ اللعبة والروابط داخل معاملة (transaction)
  await isar.writeTxn(() async {
    await isar.chessGames.put(game); // خزّن كائن اللعبة
    await game.whitePlayer
        .save(); // احفظ الروابط (IsarLinks/IsarLink تحتاج save())
    await game.blackPlayer.save();
  });

  print('--- PGN (writer) ---\n$pgnFromWriter\n');
  print('--- PGN (manual) ---\n$pgnManual\n');

  // 6) قراءة لاحقة: استرجاع الـGame مع تحميل بيانات اللاعبين
  final loadedGame = await isar.chessGames.get(game.id);
  if (loadedGame != null) {
    // روابط lazy — يجب تحميلها صراحةً
    await loadedGame.whitePlayer.load();
    await loadedGame.blackPlayer.load();

    final whiteLoaded = loadedGame.whitePlayer.value;
    final blackLoaded = loadedGame.blackPlayer.value;
    print('Loaded game: ${whiteLoaded?.name} vs ${blackLoaded?.name}');
    print('Stored PGN length: ${loadedGame.fullPgn!.length}');
  }
}
